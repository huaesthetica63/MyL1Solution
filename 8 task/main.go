package main

import (
	"fmt"
)

//x-ссылка на исходное число, где меняем бит, i-номер бита, bit - 0/1 (false/true)
//биты начинаем считать с нулевого (если надо начать счет с первого бита, то i=i-1)
func SetBit(x *int64, i int, bit bool) {
	//применяем побитовые операции
	if bit { //для установки единицы применяем побитовое сложение (ИЛИ)
		*x = (*x) | (1 << i)
		//(1<<i) это число вида 0000000...1000...00 (все нули кроме i-того бита)
	} else {
		//для установки нуля применяем побитовое умножение (И)
		*x = (*x) & (^(1 << i))
		//здесь (^(1<<i)) уже инвертируем то число (теперь все единицы кроме i-того бита)
	}
}

func main() {
	var integer int64 = 141                                      //исходное число  (10001101)                                         //10001101
	fmt.Printf("Исходное число в бинарной форме: %b\n", integer) //вывод в бинарной форме
	SetBit(&integer, 3, false)                                   //изменили третий бит на 0 (10001101)
	fmt.Println("Третий бит заменен на 0")
	fmt.Printf("%b\n", integer) //133 (10000101)
	SetBit(&integer, 6, true)   //6 бит на 1
	fmt.Println("Шестой бит заменен на 1")
	fmt.Printf("%b\n", integer) //197 (11000101)
}
