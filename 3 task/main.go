package main

import (
	"fmt"
	"sync"
)

//один вариант решения похож на предыдущую задачу, только вместо вывода чисел в другой горутине, мы в ней будем суммировать числа
//второй вариант с использованием мьютекса
func FirstWay(arr [5]int) int {
	sum := 0                //сумма квадратов
	ch := make(chan int, 5) //можно использовать буферизированный канал, чтобы не дожидаться пока вторая горутина досчитает сумму, чтобы записать новое число
	for i := 0; i < 5; i++ {
		go func(i int) {
			ch <- arr[i] * arr[i]
		}(i)
	}
	for i := 0; i < 5; i++ {
		temp := <-ch //мы гарантированно считаем 5 чисел и выведем в конце конечную, а не промежуточную функцию
		sum = sum + temp
	}
	return sum
}
func SecondWay(arr [5]int) int {
	sum := 0                 //сумма квадратов
	var mutex sync.Mutex     //мьютекс для безопасной записи
	var group sync.WaitGroup //для того, чтобы основная функция подождала завершения горутин
	for i := 0; i < 5; i++ {
		group.Add(1)
		go func(i int) {
			mutex.Lock()
			sum = sum + arr[i]*arr[i] //прибавляем сумму квадратов безопасно (другая горутина не будет в этот момент записывать)
			mutex.Unlock()
			group.Done()
		}(i)
	}
	group.Wait()
	return sum
}
func main() {
	var arr = [5]int{2, 4, 6, 8, 10} //используется фиксированный массив для оптимизации производительности
	fmt.Printf("Сумма (1 метод): %d\n", FirstWay(arr))
	fmt.Printf("Сумма (2 метод): %d\n", SecondWay(arr))
}
