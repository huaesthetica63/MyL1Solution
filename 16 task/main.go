package main

import "fmt"

// быстрая сортировка состоит из:
//1) выбора опорного элемента (в этом алгоритме это середина слайса)
//2) сравнения элементов с опорным и разделение на: больше/равно и меньше опорного
//3) рекурсивная сортировка внутри этих групп
func Qsort(arr []int) []int {
	if len(arr) < 2 {
		return arr //если в массиве 1 элемент - сортировать смысла нет
	}
	var (
		left  = 0            //левая граница сортировки
		right = len(arr) - 1 //правая граница сортировки
	)
	opora := right / 2                              //опорный элемент - середина
	arr[opora], arr[right] = arr[right], arr[opora] //переставляем этот элемент в конец
	for i := 0; i < len(arr); i++ {                 //начинаем распределять элементы массива
		if arr[i] < arr[right] { //если текущий элемент меньше опорного
			arr[left], arr[i] = arr[i], arr[left] //вставляем его "влево"
			left++                                //смещаем раздел между меньше опорного и больше/равно опорному
		}
	}
	arr[left], arr[right] = arr[right], arr[left] //вставляем опорный элемент обратно в место "раздела"
	Qsort(arr[:left])                             // рекурсия для элементов меньше опорного
	Qsort(arr[left+1:])                           //рекурсия для сортировки для больше/равно
	//можем передавать в функцию слайс, поскольку при обращении к элементам функция изменяет слайс напрямую
	return arr
}
func main() {
	arr := []int{1, 35, 22, -10, 33, 53, 2, 0, 110, 99}
	fmt.Println("Исходный массив: ")
	fmt.Println(arr)
	fmt.Println("Отсортированный массив: ")
	fmt.Println(Qsort(arr))
}
